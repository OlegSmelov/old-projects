package gui;

import gui.lib.DBCellRenderer;
import gui.lib.DBPanel;
import gui.lib.DBTableModel;
import gui.lib.DateCellEditor;
import java.sql.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import lib.DatabaseObject;
import lib.Receipt;
import lib.Trip;

public class TripReceiptPanel extends DBPanel {

    private final Trip trip;
    private final AbstractTableModel tableModel;
    private String[] columnNames = {"Kuro kodas", "Kiekis", "Kaina", "Kvito data", "Pardavėjo banko sąskaita",
        "Pardavėjo adresas", "Pardavėjo ĮK", "Apmokėjusio darbuotojo AK", "Apmokėtas"};

    /**
     * Creates new form TripReceiptPanel
     */
    public TripReceiptPanel() {
        this(false, null);
    }

    public TripReceiptPanel(boolean autoUpdate, Trip trip) {
        this.trip = trip;
        this.tableModel = new DBTableModel(columnNames, objects) {

            @Override
            public Object getObjectValue(DatabaseObject object, int row, int col) {
                Receipt receipt = (Receipt) object;
                switch (col) {
                    case 0:
                        return receipt.getFuelCode();
                    case 1:
                        return receipt.getAmount();
                    case 2:
                        return receipt.getPrice();
                    case 3:
                        return receipt.getReceiptDate();
                    case 4:
                        return receipt.getBankAccount();
                    case 5:
                        return receipt.getSellerAddress();
                    case 6:
                        return receipt.getSellerCompanyCode();
                    case 7:
                        return receipt.getPayerSSN();
                    case 8:
                        return receipt.getIsPaid();
                    default:
                        return null;
                }
            }

            @Override
            public boolean setObjectValue(DatabaseObject object, Object value, int row, int col) {
                if (object != null && !object.equals(getObjectValue(object, row, col))) {
                    Receipt receipt = (Receipt) object;
                    switch (col) {
                        case 0:
                            receipt.setFuelCode((String) value);
                            break;
                        case 1:
                            receipt.setAmount((Double) value);
                            break;
                        case 2:
                            receipt.setPrice((Double) value);
                            break;
                        case 3:
                            receipt.setReceiptDate((Date) value);
                            break;
                        case 4:
                            receipt.setBankAccount((String) value);
                            break;
                        case 5:
                            receipt.setSellerAddress((String) value);
                            break;
                        case 6:
                            receipt.setSellerCompanyCode((String) value);
                            break;
                        case 7:
                            receipt.setPayerSSN((String) value);
                            break;
                        case 8:
                            receipt.setIsPaid((Boolean) value);
                            break;
                    }
                    return true;
                }
                return false;
            }

            @Override
            public boolean isObjectEditable(DatabaseObject object, int col) {
                return true;
            }
        };

        initComponents();

        if (autoUpdate) {
            repopulateTripReceiptTable();
        }

        tripReceiptTable.setDefaultRenderer(Object.class, new DBCellRenderer());
        tripReceiptTable.setDefaultEditor(Date.class, new DateCellEditor());
    }

    private void repopulateTripReceiptTable() {
        List<Receipt> fetchedReceipts = Receipt.fetchListByTripID(trip.getID());

        objects.clear();
        if (fetchedReceipts != null) {
            objects.addAll(fetchedReceipts);
        }
    }

    @Override
    public void resetData() {
        repopulateTripReceiptTable();
    }

    @Override
    public void redrawData() {
        tableModel.fireTableDataChanged();
    }

    public java.sql.Date getCurrentDate() {
        return new java.sql.Date(new java.util.Date().getTime());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tripReceiptTable = new javax.swing.JTable();
        jAddButton = new javax.swing.JButton();
        jRemoveButton = new javax.swing.JButton();
        jSaveCompanyButton = new javax.swing.JButton();
        jLoadButton = new javax.swing.JButton();

        tripReceiptTable.setModel(tableModel);
        tripReceiptTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tripReceiptTable);

        jAddButton.setText("Pridėti");
        jAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddButtonActionPerformed(evt);
            }
        });

        jRemoveButton.setText("Trinti");
        jRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRemoveButtonActionPerformed(evt);
            }
        });

        jSaveCompanyButton.setText("Išsaugoti");
        jSaveCompanyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveCompanyButtonActionPerformed(evt);
            }
        });

        jLoadButton.setText("Pakrauti");
        jLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLoadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jAddButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRemoveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSaveCompanyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLoadButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jAddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRemoveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                        .addComponent(jSaveCompanyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLoadButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddButtonActionPerformed
        Receipt receipt = new Receipt("", trip.getID(), 0.0, 0.0, getCurrentDate(), "", "", "", false, null);
        objects.add(receipt);

        int lastIndex = objects.size() - 1;
        tableModel.fireTableRowsInserted(lastIndex, lastIndex);
    }//GEN-LAST:event_jAddButtonActionPerformed

    private void jRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRemoveButtonActionPerformed
        int[] selection = tripReceiptTable.getSelectedRows();
        if (selection.length > 0) {
            int result = JOptionPane.showConfirmDialog(this, "Ar tikrai norite pašalinti pasirinktus įrašus?",
                "Šalinti kvitus", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (result == JOptionPane.YES_OPTION) {
                for (int i = selection.length - 1; i >= 0; i--) {
                    DatabaseObject object = objects.get(selection[i]);
                    if (object.destroy()) {
                        objects.remove(selection[i]);
                    }
                }

                if (selection.length > 0) {
                    tableModel.fireTableRowsDeleted(selection[0],
                        selection[selection.length - 1]);
                }
            }
        }
    }//GEN-LAST:event_jRemoveButtonActionPerformed

    private void jSaveCompanyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveCompanyButtonActionPerformed
        saveData();
        tableModel.fireTableDataChanged();
    }//GEN-LAST:event_jSaveCompanyButtonActionPerformed

    private void jLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLoadButtonActionPerformed
        resetData();
    }//GEN-LAST:event_jLoadButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddButton;
    private javax.swing.JButton jLoadButton;
    private javax.swing.JButton jRemoveButton;
    private javax.swing.JButton jSaveCompanyButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tripReceiptTable;
    // End of variables declaration//GEN-END:variables
}
