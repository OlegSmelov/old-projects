package gui;

import gui.lib.DBCellRenderer;
import gui.lib.DBPanel;
import gui.lib.DBTableModel;
import gui.lib.DateCellEditor;
import java.sql.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import lib.Company;
import lib.DatabaseObject;
import lib.Trip;

public class TripPanel extends DBPanel {

    private final JFrame parentFrame;
    private final Company company;
    private final AbstractTableModel tableModel;
    private String[] columnNames = {"Data nuo", "Data iki", "Iš kur", "Kur", "Aprašymas"};

    /**
     * Creates new form TripPanel
     */
    public TripPanel() {
        this(null, false, null);
    }

    public TripPanel(JFrame parentFrame, boolean autoUpdate, Company company) {
        this.parentFrame = parentFrame;
        this.company = company;
        this.tableModel = new DBTableModel(columnNames, objects) {

            @Override
            public Object getObjectValue(DatabaseObject object, int row, int col) {
                Trip trip = (Trip) object;
                switch (col) {
                    case 0:
                        return trip.getDateFrom();
                    case 1:
                        return trip.getDateUntil();
                    case 2:
                        return trip.getStartLocation();
                    case 3:
                        return trip.getEndLocation();
                    case 4:
                        return trip.getDescription();
                    default:
                        return null;
                }
            }

            @Override
            public boolean setObjectValue(DatabaseObject object, Object value, int row, int col) {
                if (object != null && !object.equals(getObjectValue(object, row, col))) {
                    Trip trip = (Trip) object;
                    switch (col) {
                        case 0:
                            trip.setDateFrom((Date) value);
                            break;
                        case 1:
                            trip.setDateUntil((Date) value);
                            break;
                        case 2:
                            trip.setStartLocation((String) value);
                            break;
                        case 3:
                            trip.setEndLocation((String) value);
                            break;
                        case 4:
                            trip.setDescription((String) value);
                            break;
                    }
                    return true;
                }
                return false;
            }

            @Override
            public boolean isObjectEditable(DatabaseObject object, int col) {
                if (object.isCreated()) {
                    return true;
                }
                return true;
            }
        };

        initComponents();

        if (autoUpdate) {
            repopulateTripTable();
        }

        tripTable.setDefaultRenderer(Object.class, new DBCellRenderer());
        tripTable.setDefaultEditor(Date.class, new DateCellEditor());
    }

    private void repopulateTripTable() {
        List<Trip> fetchedTrips = Trip.fetchByCompanyCode(company.getCode());
        objects.clear();
        if (fetchedTrips != null) {
            objects.addAll(fetchedTrips);
        }

        tableModel.fireTableDataChanged();
    }

    @Override
    public void resetData() {
        repopulateTripTable();
    }

    @Override
    public void redrawData() {
        tableModel.fireTableDataChanged();
    }

    public java.sql.Date getCurrentDate() {
        return new java.sql.Date(new java.util.Date().getTime());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tripTable = new javax.swing.JTable();
        jAddButton1 = new javax.swing.JButton();
        jRemoveButton = new javax.swing.JButton();
        editTripButton = new javax.swing.JButton();
        jSaveCompanyButton = new javax.swing.JButton();
        jLoadButton = new javax.swing.JButton();

        tripTable.setModel(tableModel);
        tripTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tripTable);

        jAddButton1.setText("Pridėti");
        jAddButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddButton1ActionPerformed(evt);
            }
        });

        jRemoveButton.setText("Trinti");
        jRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRemoveButtonActionPerformed(evt);
            }
        });

        editTripButton.setText("Redaguoti");
        editTripButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTripButtonActionPerformed(evt);
            }
        });

        jSaveCompanyButton.setText("Išsaugoti");
        jSaveCompanyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveCompanyButtonActionPerformed(evt);
            }
        });

        jLoadButton.setText("Pakrauti");
        jLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLoadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jAddButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLoadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSaveCompanyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editTripButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jAddButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRemoveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editTripButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                        .addComponent(jSaveCompanyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLoadButton)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jAddButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddButton1ActionPerformed
        Trip trip = new Trip(0, company.getCode(), "", getCurrentDate(), getCurrentDate(), "", "");
        objects.add(trip);

        int lastIndex = objects.size() - 1;
        tableModel.fireTableRowsInserted(lastIndex, lastIndex);
    }//GEN-LAST:event_jAddButton1ActionPerformed

    private void jRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRemoveButtonActionPerformed
        int[] selection = tripTable.getSelectedRows();
        if (selection.length > 0) {
            int result = JOptionPane.showConfirmDialog(this, "Ar tikrai norite pašalinti pasirinktus įrašus?",
                "Šalinti keliones", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (result == JOptionPane.YES_OPTION) {
                for (int i = selection.length - 1; i >= 0; i--) {
                    DatabaseObject object = objects.get(selection[i]);
                    if (object.destroy()) {
                        objects.remove(selection[i]);
                    }
                }

                if (selection.length > 0) {
                    tableModel.fireTableRowsDeleted(selection[0],
                        selection[selection.length - 1]);
                }
            }
        }
    }//GEN-LAST:event_jRemoveButtonActionPerformed

    private void editTripButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTripButtonActionPerformed
        int selection = tripTable.getSelectedRow();
        if (selection != -1) {
            Trip trip = (Trip) objects.get(selection);
            if (trip.isCreated()) {
                TripEditDialog dialog = new TripEditDialog(parentFrame, true, trip);
                dialog.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(parentFrame, "Iš pradžių išsaugokite šią kelionę.",
                        "Klaida", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_editTripButtonActionPerformed

    private void jSaveCompanyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveCompanyButtonActionPerformed
        saveData();
        tableModel.fireTableDataChanged();
    }//GEN-LAST:event_jSaveCompanyButtonActionPerformed

    private void jLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLoadButtonActionPerformed
        resetData();
    }//GEN-LAST:event_jLoadButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editTripButton;
    private javax.swing.JButton jAddButton;
    private javax.swing.JButton jAddButton1;
    private javax.swing.JButton jLoadButton;
    private javax.swing.JButton jRemoveButton;
    private javax.swing.JButton jSaveCompanyButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tripTable;
    // End of variables declaration//GEN-END:variables
}
